#Shell vars
set shell sh
set shellopts '-eu'
set ifs "\n"
set scrolloff 10

# Basic vars
set icons
set period 1
set hiddenfiles ".*:*.aux:*.log:*.bbl:*.bcf:*.blg:*.run.xml"
set drawbox true
set previewer lf-noim
set hidden!

cmd open ${{
    case $(file --mime-type "$(readlink -f $f)" -b) in
    application/json) fx $fx;;
	text/*|inode/x-empty) $EDITOR $fx;;
    image/*) imgcat $fx;;
	application/pgp-encrypted) $EDITOR $fx ;;
        *) for f in $fx; do setsid -f $OPENER $f >/dev/null 2>&1; done;;
    esac
}}

cmd mkdir ${{
  printf "Directory Name: "
  read ans
  mkdir -p $ans
}}

cmd mkfile ${{
  printf "File Name: "
  read ans
  touch $ans
  clear
}}


cmd chmod ${{
  printf "Mode Bits: "
  read ans

  for file in "$fx"
  do
    chmod $ans $file
  done

  lf -remote 'send reload'
}}


# Archive bindings
cmd unarchive ${{
  case "$f" in
      *.zip) unzip "$f" ;;
      *.tar.gz) tar -xzvf "$f" ;;
      *.tar.bz2) tar -xjvf "$f" ;;
      *.tar) tar -xvf "$f" ;;
      *) echo "Unsupported format" ;;
  esac
}}

cmd zip %zip -r "$f" "$f"
cmd tar %tar cvf "$f.tar" "$f"
cmd targz %tar cvzf "$f.tar.gz" "$f"
cmd tarbz2 %tar cjvf "$f.tar.bz2" "$f"

cmd delete ${{
	clear; tput cup $(($(tput lines)/3)); tput bold
	set -f
	printf "%s\n\t" "$fx"
	printf "delete?[y/N]"
	read ans
	[ $ans = "y" ] && rm -rf -- $fx
	clear
}}


# Bindings
# Remove some defaults
map m
map o
map n
map "'"
map '"'
map d
map c
map f
map r
map t

# Archive Mappings
map az zip
map at tar
map ag targz
map ab targz
map E unarchive

# Trash Mappings
map D delete

# General Mappings
map . set hidden!
map p paste
map x cut
map y copy
map <enter> open
map o open
map mf mkfile
map md mkdir
map ch chmod

# Rename Mappings
map R rename # at the very end
map rc push R<c-u> # new rename
map ri push R<c-a> # at the very beginning
map re push R<a-b><a-b><a-f> # before extension
map ra push R<a-b> # after extension


map <c-r> reload
map C clear
map u unselect

map gc cd ~/.config
map gl cd ~/.local
map \;j cd ~






